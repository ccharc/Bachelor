?VARselect
rm(list=ls())
#library(readxl)
#library(vars)
library(imputeTS)
#library(forecast)
#library(tseries)
#library(stats)
#library(strucchange)
library("astsa")
polymult <- function(x,a,b)
# a(B) = a_0 + a_1*B + a_2*BÂ² + ... + a_p*B^p
# b(B) = b_0 + b_1*B + b_2*BÂ² + ... + a_q*B^q
# where wlog p >= q
# Result is a(B)b(B) x_t
{
if (length(b) == 1){polycoeff <- b[1]*array(a)}
else
{alpha <- array(a)
p <- dim(alpha) - 1
beta <- array(b)
q <- dim(beta) - 1
# Assumed: p >= q
polycoeff <- array(rep(0,p+q + 1))
for (k in 0:(p+q))
for (j in max(0,k-q):min(k,p))
{polycoeff[k+1] <- polycoeff[k+1] + alpha[j+1]*beta[k-j+1]}
}
return(filter(x,c(polycoeff),sides=1, method="convolution"))
# test: return(polycoeff)
}
polyinvers <- function (x, a, maxlag = 30)
# a(B) = a_0 + a_1*B + a_2*BÂ² + ... + a_p*B^p
# Result is (1/a(B)) x_t
{
phi <- array(a)
p <- dim(phi) - 1 # assumed >= 1
polycoeff <- array(rep(0,maxlag))
polycoeff[1] <- 1/phi[1]
for (k in 1:(maxlag - 1))
for (j in (1:min(p,k)))
{polycoeff[k+1] <- polycoeff[k+1] - phi[j+1]*polycoeff[k-j+1]/phi[1]}
return(filter(x,c(polycoeff),sides=1, method="convolution"))
#test:return(polycoeff)
}
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
setwd("~/")
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
CONS16 = cons16[3:8787,4]
rm(list=ls())
#library(readxl)
#library(vars)
library(imputeTS)
#library(forecast)
#library(tseries)
#library(stats)
#library(strucchange)
library("astsa")
polymult <- function(x,a,b)
# a(B) = a_0 + a_1*B + a_2*BÂ² + ... + a_p*B^p
# b(B) = b_0 + b_1*B + b_2*BÂ² + ... + a_q*B^q
# where wlog p >= q
# Result is a(B)b(B) x_t
{
if (length(b) == 1){polycoeff <- b[1]*array(a)}
else
{alpha <- array(a)
p <- dim(alpha) - 1
beta <- array(b)
q <- dim(beta) - 1
# Assumed: p >= q
polycoeff <- array(rep(0,p+q + 1))
for (k in 0:(p+q))
for (j in max(0,k-q):min(k,p))
{polycoeff[k+1] <- polycoeff[k+1] + alpha[j+1]*beta[k-j+1]}
}
return(filter(x,c(polycoeff),sides=1, method="convolution"))
# test: return(polycoeff)
}
polyinvers <- function (x, a, maxlag = 30)
# a(B) = a_0 + a_1*B + a_2*BÂ² + ... + a_p*B^p
# Result is (1/a(B)) x_t
{
phi <- array(a)
p <- dim(phi) - 1 # assumed >= 1
polycoeff <- array(rep(0,maxlag))
polycoeff[1] <- 1/phi[1]
for (k in 1:(maxlag - 1))
for (j in (1:min(p,k)))
{polycoeff[k+1] <- polycoeff[k+1] - phi[j+1]*polycoeff[k-j+1]/phi[1]}
return(filter(x,c(polycoeff),sides=1, method="convolution"))
#test:return(polycoeff)
}
cons16 = data.frame(read.csv("/home/esben/P-drev/Dokumenter/Undervisning/6. semester F2020/5.232 b/Bachelor-master-30-4/consumption-se-areas_2016_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
setwd("~/")
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
?var
#library(forecast)
#library(tseries)
#library(stats)
#library(strucchange)
library("astsa")
?VAR
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
library(tseries)
library(stats)
library(strucchange)
library(tidyr)
library(astsa)
?VAR
?VAR.est
?VARselect
?sarima
#library(forecast)
#library(tseries)
#library(stats)
#library(strucchange)
library("astsa")
?sarima
setwd("~/")
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
library(tseries)
library(stats)
library(strucchange)
library(tidyr)
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
setwd("~/Bachelorprojekt/Bachelor")
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
library(tseries)
library(stats)
library(strucchange)
library(tidyr)
library(astsa)
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
CONS16 = cons16[3:8787,4]
SE2cons = data.frame(na_interpolation(c(CONS16), option = "linear"))
dato1 <- seq(c(ISOdate(2016,1,1,0)), by = "hours", length.out = 8785)
data = data.frame(dato1,SE2cons)
data <- data[1:2182,1:2]
se2conskvart1 <- data
plot(se2conskvart1,type="l")
acf2(se2conskvart1[,2])
scons= lm(se2conskvart1[,2] ~ time(data[,1])+
sin((2*pi)/24*I(time(data[,1])))+
cos((2*pi)/24*I(time(data[,1])))+
sin((4*pi)/24*I(time(data[,1])))+
cos((4*pi)/24*I(time(data[,1])))
)
summary(scons)
z_t = ts(scons$residuals)
plot.ts(z_t)
plot.ts(diff(z_t,12))
acf2(z_t)
acf2(diff(z_t,1))
est_resultat <- sarima(z_t,4,1,0,1,0,0,24,no.constant = TRUE)
est_resultat$ttable
plot(est_resultat$fit$residuals, type="l")
acf2(est_resultat$fit$residuals)
print(coefs)
plot(est_resultat$fit$ACF)
plot(est_resultat$fit$residuals$ACF)
plot(est_resultat$fit$residuals)
plot(est_resultat$fit$ACF)
plot(est_resultat$fit$, type = "ACF")
plot(est_resultat$fit$residuals, type="ACF")
plot(est_resultat$fit$residuals, type="acf")
acf2(est_resultat$fit$residuals)
est_resultat <- sarima(z_t,4,1,0,1,0,0,24,no.constant = TRUE)
acf2(est_resultat$fit$residuals)
View(est_resultat)
qq(est_resultat$fit$residuals)
qqplot(est_resultat$fit$residuals)
acf2(est_resultat$fit$residuals)
?qqplot
acf2(est_resultat$fit$residuals)
est_resultat <- sarima(z_t,4,1,0,1,0,0,24,no.constant = TRUE)
est_resultat <- sarima(z_t,4,1,0,1,0,0,24,no.constant = TRUE)
?sarima
install.packages("LSTS")
?sarima
