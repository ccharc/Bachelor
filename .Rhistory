s <- cars$speed
d <- cars$dist
g_a <- 1/n * sum(2 * (ab[1] + ab[2] * s - d) )
g_b <- 1/n * sum(2 * (ab[1] + ab[2] * s - d) * s)
return(c(g_a,g_b))
}
backtracking_line_search <- function(alpha, c, rho, x_k, p_k, g_k, f) {
alpha_k <- alpha
repeat {
lhs <- f(x_k + alpha_k * p_k)
rhs <- f(x_k) + c * alpha_k * g_k %*% p_k
if (lhs <= rhs) break
alpha_k <- rho * alpha_k
}
return(alpha_k)
}
steepest_descent <- function(f, g, x_k, alpha, c, rho, tol, k_max) {
N <- 30
x <- seq(-20,3,length=N)
y <- seq(1,7,  length=N)
z <- Outer(x , y , f_xy)
lev <- c(300,500,750,1000,2000,4000)
contour(x, y, z, levels = lev)
k <- 0
g_k <- tol + 1 # For at komme i gang
while ((norm(g_k , type="2") > tol) & (k < k_max)) { # Type 2 er for vektorer
g_k <- g(x_k)
p_k <- -g_k
alpha_k <- backtracking_line_search(alpha, c, rho, x_k, p_k, g_k, f)
x_old <- x_k
x_k <- x_k + alpha_k * p_k
k <- k + 1
lines(c(x_old[1],x_k[1]) , c(x_old[2],x_k[2]) , col = "red")
}
printfln("k = %d \t x_k = (%6.3f , %6.3f) \t f_k = %.2f \t g_k = (%8.3f , %8.3f) \t alpha_k = %.5f", k, x_k[1] , x_k[2], f(x_k), g_k[1] , g_k[2], alpha_k)
return(x_k)
}
x_sol <- steepest_descent(f, g, x_k   = c(1,5) ,
alpha = 1      ,
c     = 1e-4   ,
rho   = 0.5    ,
tol   = 1e-4   ,
k_max = 20000)
plot(dist ~ speed , cars)
abline(x_sol , col = "red")
legend(4,115,legend = "m(s) = a + bs" , col = "red" , lty = 1)
f_xy <- function(x,y) return(f(c(x,y)))
f <- function(ab){
sum = 0
n <- length(cars$dist)
s <- cars$speed
d <- cars$dist
return(1/n * sum((ab[1] + ab[2] * s - d)^2))
}
f_xy <- function(x,y) return(f(c(x,y)))
clear
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
install.packages("magrittr")
install.packages("imager")
library("imager")
install.packages("imager")
install.packages("imager")
#Load the image
img <- load.image("candy.jpg")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
#Load the image
img <- load.image("candy.jpg")
library("imager", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("imager")
#Load the image
img <- load.image("candy.jpg")
detach("package:imager", unload=TRUE)
library("imager", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
remove.packages("imager")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
rm(list=ls())   #Delete old variables
graphics.off()  #Delete old plots
library("imager")
remove.packages("imager")
install.packages("imager")
library("imager")
install.packages("imager")
install.packages(c("animation", "backports", "class", "codetools", "digest", "evaluate", "foreign", "jsonlite", "knitr", "lattice", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "Rcpp", "rmarkdown", "Rmpfr", "stringi", "stringr", "survival", "tinytex", "xfun"))
library("imager")
install.packages("magrittr")
library("imager")
library("animation")
detach("package:animation", unload=TRUE)
install.packages("imager")
library("imager")
rm(list=ls())
graphics.off()
set.seed(2)
x=matrix(rnorm (50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
num = 1:50
hc.complete =hclust(dist(x), method="complete")
clust = cutree(hc.complete , 2)
par(mfrow = c(1,2))
par(mar=c(2,2,2,2))
plot(x , main="Data", xlab="", ylab="", type='n', xaxt='n',yaxt='n')
text(x[,1],x[,2],col=clust,labels =as.character(num), cex=0.4)
plot(hc.complete ,main="Complete Linkage", xlab="", ylab="",sub="", cex=.4, hang=-1)
data("iris")
kmeans(K=3, N=10)
?kmeans
kmeans(x, K=3, N=10)
kmeans(x,3,10)
load(iris)
?tail
head(iris)
(73.89-72.37)/72.37 *100
(94,49-71,86)/71.86*100
(94.49-71.86)/71.86*100
(91.88-71.86)/71.86*100
(91.31-71.86)/71.86*100
(101.54-71.86)/71.86*100
(73.75-71.86)/71.86*100
residuals.lm(dk1p)
residuals.lm(arima(dk1p))
y <- arima.sim(model=list(ma=0.3, order =c(0,0,1)), n=10000)
y <- arima.sim(model=list(ma=0.3, order =c(0,0,1)), n=10000)
plot(y)
acf(y)
diff(y)
x=diff(y)
acf(x)
vartime = function(x, nmax = round(length(x) / 10)) {
v = rep(NA, nmax);
for (n in 1:nmax) {
y = filter(x, rep(1/n, n), sides = 1);
v[n] = var(y, na.rm = TRUE);
}
plot(log(1:nmax), log(v));
lmv = lm(log(v) ~ log(1:nmax));
abline(lmv);
title(paste(deparse(substitute(x)), "; nmax = ", nmax));
print(summary(lmv));
}
vartime(log(varve))
vartime(residuals(lm(log(varve) ~ time(log(varve)))))
vartime = function(x, nmax = round(length(x) / 10)) {
v = rep(NA, nmax);
for (n in 1:nmax) {
y = filter(x, rep(1/n, n), sides = 1);
v[n] = var(y, na.rm = TRUE);
}
plot(log(1:nmax), log(v));
lmv = lm(log(v) ~ log(1:nmax));
abline(lmv);
title(paste(deparse(substitute(x)), "; nmax = ", nmax));
print(summary(lmv));
}
vartime(log(varve))
vartime(residuals(lm(log(varve) ~ time(log(varve)))))
plot(vartime())
plot(vartime(10))
plot(vartime())
adf?
?adf
clc
cleart
clear
?adf
adf.test?
adf.test
?adf.test
setwd("~/Desktop/MatØk6/Bachelor")
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
library(tseries)
library(stats)
library(strucchange)
library(tidyr)
elprice16 =  data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";",dec=","))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
prod16 = data.frame(read.csv("production2016_hourly.csv",sep=";"))
SE2price = elprice16[1:8785,5]
SE2cons = na_interpolation(as.numeric(as.character(cons16[3:8787,4])), option = "linear")
SE2prod = na_interpolation(as.numeric(as.character(prod16[3:8787,4])), option = "linear")
dato1 <- seq(c(ISOdate(2016,1,1,0)), by = "hours", length.out = 8785)
data = data.frame(dato1,SE2price,SE2cons,SE2prod)
plot.ts(SE2price)
plot.ts(SE2cons)
plot.ts(SE2prod)
acf(x_t1)
### Sæson kvartal price
se2pricekvart1 = data[1:2183,1:2]
se2pricekvart2 = data[2184:4367,1:2]
se2pricekvart3 = data[4368:6575,1:2]
se2pricekvart4 = data[6576:8784,1:2]
### Sæson kvartal cons
se2conskvart1 = data[1:2183,c(1,3)]
se2conskvart2 = data[2184:4367,c(1,3)]
se2conskvart3 = data[4368:6575,c(1,3)]
se2conskvart4 = data[6576:8784,c(1,3)]
### Sæson kvartal wind
se2prodkvart1 = data[1:2183,c(1,4)]
se2prodkvart2 = data[2184:4367,c(1,4)]
se2prodkvart3 = data[4368:6575,c(1,4)]
se2prodkvart4 = data[6576:8784,c(1,4)]
sprodkvart1 = glm(se2prodkvart1[,2] ~ time(se2prodkvart1[,1]) +
I(time(se2prodkvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart1[,1])))
)
sprodkvart2 = glm(se2prodkvart2[,2] ~ time(se2prodkvart2[,1]) +
I(time(se2prodkvart2[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart2[,1])))
)
sprodkvart3 = glm(se2prodkvart3[,2] ~ time(se2prodkvart3[,1]) +
I(time(se2prodkvart3[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart3[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart3[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart3[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart3[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart3[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart3[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart3[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart3[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart3[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart3[,1])))
)
sprodkvart4 = glm(se2prodkvart4[,2] ~ time(se2prodkvart4[,1]) +
I(time(se2prodkvart4[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart4[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart4[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart4[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart4[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart4[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart4[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart4[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart4[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart4[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart4[,1])))
)
### Sæson kvartal consumption
sconskvart1 = glm(se2conskvart1[,2] ~ time(se2conskvart1[,1]) +
I(time(se2conskvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2conskvart1[,1])))+
cos((8*pi)/8784*I(time(se2conskvart1[,1])))+
sin((24*pi)/8784*I(time(se2conskvart1[,1])))+
cos((24*pi)/8784*I(time(se2conskvart1[,1])))+
sin((104*pi)/8784*I(time(se2conskvart1[,1])))+
cos((104*pi)/8784*I(time(se2conskvart1[,1])))+
sin((732*pi)/8784*I(time(se2conskvart1[,1])))+
cos((732*pi)/8784*I(time(se2conskvart1[,1])))+
sin((17568*pi)/8784*I(time(se2conskvart1[,1])))+
cos((17568*pi)/8784*I(time(se2conskvart1[,1])))
)
sconskvart2 = glm(se2conskvart2[,2] ~ time(se2conskvart2[,1]) +
I(time(se2conskvart2[,1])^2) +
sin((8*pi)/8784*I(time(se2conskvart2[,1])))+
cos((8*pi)/8784*I(time(se2conskvart2[,1])))+
sin((24*pi)/8784*I(time(se2conskvart2[,1])))+
cos((24*pi)/8784*I(time(se2conskvart2[,1])))+
sin((104*pi)/8784*I(time(se2conskvart2[,1])))+
cos((104*pi)/8784*I(time(se2conskvart2[,1])))+
sin((732*pi)/8784*I(time(se2conskvart2[,1])))+
cos((732*pi)/8784*I(time(se2conskvart2[,1])))+
sin((17568*pi)/8784*I(time(se2conskvart2[,1])))+
cos((17568*pi)/8784*I(time(se2conskvart2[,1])))
)
sconskvart3 = glm(se2conskvart3[,2] ~ time(se2conskvart3[,1]) +
I(time(se2conskvart3[,1])^2) +
sin((8*pi)/8784*I(time(se2conskvart3[,1])))+
cos((8*pi)/8784*I(time(se2conskvart3[,1])))+
sin((24*pi)/8784*I(time(se2conskvart3[,1])))+
cos((24*pi)/8784*I(time(se2conskvart3[,1])))+
sin((104*pi)/8784*I(time(se2conskvart3[,1])))+
cos((104*pi)/8784*I(time(se2conskvart3[,1])))+
sin((732*pi)/8784*I(time(se2conskvart3[,1])))+
cos((732*pi)/8784*I(time(se2conskvart3[,1])))+
sin((17568*pi)/8784*I(time(se2conskvart3[,1])))+
cos((17568*pi)/8784*I(time(se2conskvart3[,1])))
)
sconskvart4 = glm(se2conskvart4[,2] ~ time(se2conskvart4[,1]) +
I(time(se2conskvart4[,1])^2) +
sin((8*pi)/8784*I(time(se2conskvart4[,1])))+
cos((8*pi)/8784*I(time(se2conskvart4[,1])))+
sin((24*pi)/8784*I(time(se2conskvart4[,1])))+
cos((24*pi)/8784*I(time(se2conskvart4[,1])))+
sin((104*pi)/8784*I(time(se2conskvart4[,1])))+
cos((104*pi)/8784*I(time(se2conskvart4[,1])))+
sin((732*pi)/8784*I(time(se2conskvart4[,1])))+
cos((732*pi)/8784*I(time(se2conskvart4[,1])))+
sin((17568*pi)/8784*I(time(se2conskvart4[,1])))+
cos((17568*pi)/8784*I(time(se2conskvart4[,1])))
)
### Sæson kvartal price
spricekvart1 = glm(se2pricekvart1[,2] ~ time(se2pricekvart1[,1]) +
I(time(se2pricekvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((8*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((24*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((24*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((104*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((104*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((732*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((732*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((17568*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((17568*pi)/8784*I(time(se2pricekvart1[,1])))
)
spricekvart2 = glm(se2pricekvart2[,2] ~ time(se2pricekvart2[,1]) +
I(time(se2pricekvart2[,1])^2) +
sin((8*pi)/8784*I(time(se2pricekvart2[,1])))+
cos((8*pi)/8784*I(time(se2pricekvart2[,1])))+
sin((24*pi)/8784*I(time(se2pricekvart2[,1])))+
cos((24*pi)/8784*I(time(se2pricekvart2[,1])))+
sin((104*pi)/8784*I(time(se2pricekvart2[,1])))+
cos((104*pi)/8784*I(time(se2pricekvart2[,1])))+
sin((732*pi)/8784*I(time(se2pricekvart2[,1])))+
cos((732*pi)/8784*I(time(se2pricekvart2[,1])))+
sin((17568*pi)/8784*I(time(se2pricekvart2[,1])))+
cos((17568*pi)/8784*I(time(se2pricekvart2[,1])))
)
spricekvart3 = glm(se2pricekvart3[,2] ~ time(se2pricekvart3[,1]) +
I(time(se2pricekvart3[,1])^2) +
sin((8*pi)/8784*I(time(se2pricekvart3[,1])))+
cos((8*pi)/8784*I(time(se2pricekvart3[,1])))+
sin((24*pi)/8784*I(time(se2pricekvart3[,1])))+
cos((24*pi)/8784*I(time(se2pricekvart3[,1])))+
sin((104*pi)/8784*I(time(se2pricekvart3[,1])))+
cos((104*pi)/8784*I(time(se2pricekvart3[,1])))+
sin((732*pi)/8784*I(time(se2pricekvart3[,1])))+
cos((732*pi)/8784*I(time(se2pricekvart3[,1])))+
sin((17568*pi)/8784*I(time(se2pricekvart3[,1])))+
cos((17568*pi)/8784*I(time(se2pricekvart3[,1])))
)
spricekvart4 = glm(se2pricekvart4[,2] ~ time(se2pricekvart4[,1]) +
I(time(se2pricekvart4[,1])^2) +
sin((8*pi)/8784*I(time(se2pricekvart4[,1])))+
cos((8*pi)/8784*I(time(se2pricekvart4[,1])))+
sin((24*pi)/8784*I(time(se2pricekvart4[,1])))+
cos((24*pi)/8784*I(time(se2pricekvart4[,1])))+
sin((104*pi)/8784*I(time(se2pricekvart4[,1])))+
cos((104*pi)/8784*I(time(se2pricekvart4[,1])))+
sin((732*pi)/8784*I(time(se2pricekvart4[,1])))+
cos((732*pi)/8784*I(time(se2pricekvart4[,1])))+
sin((17568*pi)/8784*I(time(se2pricekvart4[,1])))+
cos((17568*pi)/8784*I(time(se2pricekvart4[,1])))
)
# VAR Modeller kvart
# PROD
x_t1 = ts(sprodkvart1$residuals)
x_t2 = ts(sprodkvart2$residuals)
x_t3 = ts(sprodkvart3$residuals)
x_t4 = ts(sprodkvart4$residuals)
#CONS
z_t1 = ts(sconskvart1$residuals)
z_t2 = ts(sconskvart2$residuals)
z_t3 = ts(sconskvart3$residuals)
z_t4 = ts(sconskvart4$residuals)
# PRICE
y_t1 = ts(spricekvart1$residuals)
y_t2 = ts(spricekvart2$residuals)
y_t3 = ts(spricekvart3$residuals)
y_t4 = ts(spricekvart4$residuals)
# VAR MODEL
X_t1 = data.frame(y_t1,x_t1, z_t1)
X_t2 = data.frame(y_t2,x_t2, z_t2)
X_t3 = data.frame(y_t3,x_t3, z_t3)
X_t4 = data.frame(y_t4,x_t4, z_t4)
fit1 = VAR(X_t1, ic = "AIC", lag.max = 10)
fit2 = VAR(X_t2, ic = "AIC", lag.max = 10)
fit3 = VAR(X_t3, ic = "AIC", lag.max = 10)
fit4 = VAR(X_t4, ic = "AIC", lag.max = 10)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
se2pricekvart1 = data[1:2183,1:2]
se2conskvart1 = data[1:2183,c(1,3)]
se2prodkvart1 = data[1:2183,c(1,4)]
sprodkvart1 = glm(se2prodkvart1[,2] ~ time(se2prodkvart1[,1]) +
I(time(se2prodkvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart1[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart1[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart1[,1])))
)
sprodkvart2 = glm(se2prodkvart2[,2] ~ time(se2prodkvart2[,1]) +
I(time(se2prodkvart2[,1])^2) +
sin((8*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((8*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((24*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((24*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((104*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((104*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((732*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((732*pi)/8784*I(time(se2prodkvart2[,1])))+
sin((17568*pi)/8784*I(time(se2prodkvart2[,1])))+
cos((17568*pi)/8784*I(time(se2prodkvart2[,1])))
)
sconskvart1 = glm(se2conskvart1[,2] ~ time(se2conskvart1[,1]) +
I(time(se2conskvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2conskvart1[,1])))+
cos((8*pi)/8784*I(time(se2conskvart1[,1])))+
sin((24*pi)/8784*I(time(se2conskvart1[,1])))+
cos((24*pi)/8784*I(time(se2conskvart1[,1])))+
sin((104*pi)/8784*I(time(se2conskvart1[,1])))+
cos((104*pi)/8784*I(time(se2conskvart1[,1])))+
sin((732*pi)/8784*I(time(se2conskvart1[,1])))+
cos((732*pi)/8784*I(time(se2conskvart1[,1])))+
sin((17568*pi)/8784*I(time(se2conskvart1[,1])))+
cos((17568*pi)/8784*I(time(se2conskvart1[,1])))
)
spricekvart1 = glm(se2pricekvart1[,2] ~ time(se2pricekvart1[,1]) +
I(time(se2pricekvart1[,1])^2) +
sin((8*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((8*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((24*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((24*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((104*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((104*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((732*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((732*pi)/8784*I(time(se2pricekvart1[,1])))+
sin((17568*pi)/8784*I(time(se2pricekvart1[,1])))+
cos((17568*pi)/8784*I(time(se2pricekvart1[,1])))
)
# PROD
x_t1 = ts(sprodkvart1$residuals)
z_t1 = ts(sconskvart1$residuals)
y_t1 = ts(spricekvart1$residuals)
X_t1 = data.frame(y_t1,x_t1, z_t1)
fit1 = VAR(X_t1, ic = "AIC", lag.max = 10)
z_t1 = ts(sconskvart1$residuals)[1:2182]
# PROD
x_t1 = ts(sprodkvart1$residuals)[1:2182]
x_t1 = ts(sprodkvart1$residuals)[1:2182]
x_t2 = ts(sprodkvart2$residuals)
x_t3 = ts(sprodkvart3$residuals)
x_t4 = ts(sprodkvart4$residuals)
#CONS
z_t1 = ts(sconskvart1$residuals)[1:2182]
z_t2 = ts(sconskvart2$residuals)
z_t3 = ts(sconskvart3$residuals)
z_t4 = ts(sconskvart4$residuals)
# PRICE
y_t1 = ts(spricekvart1$residuals)
X_t1 = data.frame(y_t1, x_t1, z_t1)
X_t2 = data.frame(y_t2,x_t2, z_t2)
X_t3 = data.frame(y_t3,x_t3, z_t3)
X_t4 = data.frame(y_t4,x_t4, z_t4)
fit1 = VAR(X_t1, ic = "AIC", lag.max = 10)
fit2 = VAR(X_t2, ic = "AIC", lag.max = 10)
fit3 = VAR(X_t3, ic = "AIC", lag.max = 10)
fit4 = VAR(X_t4, ic = "AIC", lag.max = 10)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
acf(x_t1)
seas_x1 = auto.arima(x_t1, d=0, seasonal = TRUE)
res_x1 = ts(seas_x1$residuals)
seas_y1 = auto.arima(y_t1, d=0, seasonal = TRUE)
acf(y_t1)
acf(z_t1)
acf(x_t1)
seas_x1 = auto.arima(x_t1, d=0, seasonal = TRUE)
res_x1 = ts(seas_x1$residuals)
acf(y_t1)
seas_y1 = auto.arima(y_t1, d=0, seasonal = TRUE)
res_y1 = ts(seas_y1$residuals)
acf(z_t1)
seas_z1 = auto.arima(z_t1, d=0, seasonal = TRUE)
res_z1 = ts(seas_z1$residuals)
seas_Xt = data.frame(res_y1, res_x1, res_z1)
seas_fit1 = VAR(seas_Xt, ic = "AIC", lag.max = 10)
summary(seas_fit1)
