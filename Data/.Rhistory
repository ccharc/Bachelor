x_(k+1) <- x_k + alpha_k * p_k;
r_(k+1) <- A %*% x_(k+1) - b;
beta_(k+1) <- (t(r_(k+1)) %*% A %*% p_k)/ (t(p_k) %*% A %*% p_k);
p_(k+1) <- - r-(k+1) + beta_(k+1) * p_k
k <- k+1
}
return(x_k)
}
MinimizeCG51 <- function(x_k, A, b, k_max = 1000, tolerance = sqrt(.Machine$double.eps)) {
# Given x_0;
r_k <- Ax_k - b; p_k <- -r_k; k <- 0
while(r_k != 0 & k < k_max){
alpha_k <- - (t(r_k) * p_k)/(t(p_k) %*% A %*% p_k);
x_(k+1) <- x_k + alpha_k * p_k;
r_(k+1) <- A %*% x_(k+1) - b;
beta_(k+1) <- (t(r_(k+1)) %*% A %*% p_k)/ (t(p_k) %*% A %*% p_k);
p_(k+1) <- - r_(k+1) + beta_(k+1) * p_k
k <- k+1
}
return(x_k)
}
MinimizeCG51 <- function(x_k, A, b, k_max = 1000, tolerance = sqrt(.Machine$double.eps)) {
# Given x_0;
r_k <- Ax_k - b; p_k <- -r_k; k <- 0
while(r_k != 0 & k < k_max){
alpha_k <- - (t(r_k) * p_k)/(t(p_k) %*% A %*% p_k);
x_k <- x_k + alpha_k * p_k;
r_k <- A %*% x_k - b;
beta_k <- (t(r_k) %*% A %*% p_k)/ (t(p_k) %*% A %*% p_k);
p_k <- - r_k + beta_k * p_k
k <- k+1
}
return(x_k)
}
knitr::opts_chunk$set(echo = TRUE)
library(SoDA)
N <- 500 # problem dimension
A <- triDiag(diagonal = 2, upper = -1, lower = -1, nrow = N)
# condition number
# https://en.wikipedia.org/wiki/Condition_number#Matrices
kappa(A)
knitr::opts_chunk$set(echo = TRUE)
library("animation")
Outer <- function(x,y,fun) {
mat <- matrix(NA, length(x), length(y))
for (i in seq_along(x)) {
for (j in seq_along(y)) {mat[i,j] <- fun(x[i],y[j])} }
mat}
printf <- function(...) cat(sprintf(...))
printfln <- function(...) cat(sprintf(...), "\n")
plot(dist ~ speed, cars)
f <- function(ab){
sum = 0
n <- length(cars$dist)
s <- cars$speed
d <- cars$dist
return(1/n * sum((ab[1] + ab[2] * s - d)^2))
}
f_xy <- function(x,y) return(f(c(x,y)))
g <- function(ab){
n <- length(cars$speed)
s <- cars$speed
d <- cars$dist
g_a <- 1/n * sum(2 * (ab[1] + ab[2] * s - d) )
g_b <- 1/n * sum(2 * (ab[1] + ab[2] * s - d) * s)
return(c(g_a,g_b))
}
backtracking_line_search <- function(alpha, c, rho, x_k, p_k, g_k, f) {
alpha_k <- alpha
repeat {
lhs <- f(x_k + alpha_k * p_k)
rhs <- f(x_k) + c * alpha_k * g_k %*% p_k
if (lhs <= rhs) break
alpha_k <- rho * alpha_k
}
return(alpha_k)
}
steepest_descent <- function(f, g, x_k, alpha, c, rho, tol, k_max) {
N <- 30
x <- seq(-20,3,length=N)
y <- seq(1,7,  length=N)
z <- Outer(x , y , f_xy)
lev <- c(300,500,750,1000,2000,4000)
contour(x, y, z, levels = lev)
k <- 0
g_k <- tol + 1 # For at komme i gang
while ((norm(g_k , type="2") > tol) & (k < k_max)) { # Type 2 er for vektorer
g_k <- g(x_k)
p_k <- -g_k
alpha_k <- backtracking_line_search(alpha, c, rho, x_k, p_k, g_k, f)
x_old <- x_k
x_k <- x_k + alpha_k * p_k
k <- k + 1
lines(c(x_old[1],x_k[1]) , c(x_old[2],x_k[2]) , col = "red")
}
printfln("k = %d \t x_k = (%6.3f , %6.3f) \t f_k = %.2f \t g_k = (%8.3f , %8.3f) \t alpha_k = %.5f", k, x_k[1] , x_k[2], f(x_k), g_k[1] , g_k[2], alpha_k)
return(x_k)
}
x_sol <- steepest_descent(f, g, x_k   = c(1,5) ,
alpha = 1      ,
c     = 1e-4   ,
rho   = 0.5    ,
tol   = 1e-4   ,
k_max = 20000)
plot(dist ~ speed , cars)
abline(x_sol , col = "red")
legend(4,115,legend = "m(s) = a + bs" , col = "red" , lty = 1)
f_xy <- function(x,y) return(f(c(x,y)))
f <- function(ab){
sum = 0
n <- length(cars$dist)
s <- cars$speed
d <- cars$dist
return(1/n * sum((ab[1] + ab[2] * s - d)^2))
}
f_xy <- function(x,y) return(f(c(x,y)))
clear
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
install.packages("magrittr")
install.packages("imager")
library("imager")
install.packages("imager")
install.packages("imager")
#Load the image
img <- load.image("candy.jpg")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
#Load the image
img <- load.image("candy.jpg")
library("imager", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("imager")
#Load the image
img <- load.image("candy.jpg")
detach("package:imager", unload=TRUE)
library("imager", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
remove.packages("imager")
#Library to load images into R.
#You my have to install it first ---> installer.packages("imager)
install.packages("imager")
library("imager")
rm(list=ls())   #Delete old variables
graphics.off()  #Delete old plots
library("imager")
remove.packages("imager")
install.packages("imager")
library("imager")
install.packages("imager")
install.packages(c("animation", "backports", "class", "codetools", "digest", "evaluate", "foreign", "jsonlite", "knitr", "lattice", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "Rcpp", "rmarkdown", "Rmpfr", "stringi", "stringr", "survival", "tinytex", "xfun"))
library("imager")
install.packages("magrittr")
library("imager")
library("animation")
detach("package:animation", unload=TRUE)
install.packages("imager")
library("imager")
rm(list=ls())
graphics.off()
set.seed(2)
x=matrix(rnorm (50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
num = 1:50
hc.complete =hclust(dist(x), method="complete")
clust = cutree(hc.complete , 2)
par(mfrow = c(1,2))
par(mar=c(2,2,2,2))
plot(x , main="Data", xlab="", ylab="", type='n', xaxt='n',yaxt='n')
text(x[,1],x[,2],col=clust,labels =as.character(num), cex=0.4)
plot(hc.complete ,main="Complete Linkage", xlab="", ylab="",sub="", cex=.4, hang=-1)
data("iris")
kmeans(K=3, N=10)
?kmeans
kmeans(x, K=3, N=10)
kmeans(x,3,10)
load(iris)
?tail
head(iris)
(73.89-72.37)/72.37 *100
(94,49-71,86)/71.86*100
(94.49-71.86)/71.86*100
(91.88-71.86)/71.86*100
(91.31-71.86)/71.86*100
(101.54-71.86)/71.86*100
(73.75-71.86)/71.86*100
residuals.lm(dk1p)
residuals.lm(arima(dk1p))
y <- arima.sim(model=list(ma=0.3, order =c(0,0,1)), n=10000)
y <- arima.sim(model=list(ma=0.3, order =c(0,0,1)), n=10000)
plot(y)
acf(y)
diff(y)
x=diff(y)
acf(x)
vartime = function(x, nmax = round(length(x) / 10)) {
v = rep(NA, nmax);
for (n in 1:nmax) {
y = filter(x, rep(1/n, n), sides = 1);
v[n] = var(y, na.rm = TRUE);
}
plot(log(1:nmax), log(v));
lmv = lm(log(v) ~ log(1:nmax));
abline(lmv);
title(paste(deparse(substitute(x)), "; nmax = ", nmax));
print(summary(lmv));
}
vartime(log(varve))
vartime(residuals(lm(log(varve) ~ time(log(varve)))))
vartime = function(x, nmax = round(length(x) / 10)) {
v = rep(NA, nmax);
for (n in 1:nmax) {
y = filter(x, rep(1/n, n), sides = 1);
v[n] = var(y, na.rm = TRUE);
}
plot(log(1:nmax), log(v));
lmv = lm(log(v) ~ log(1:nmax));
abline(lmv);
title(paste(deparse(substitute(x)), "; nmax = ", nmax));
print(summary(lmv));
}
vartime(log(varve))
vartime(residuals(lm(log(varve) ~ time(log(varve)))))
plot(vartime())
plot(vartime(10))
plot(vartime())
adf?
?adf
clc
cleart
clear
?adf
adf.test?
adf.test
?adf.test
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
library(readxl)
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
setwd("~/Desktop/MatÃ˜k6/Data")
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
remove.packages("pillar")
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
install.packages("pillar")
library("pillar", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("readxl")
install.packages("readxl")
install.packages("vctrs")
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
library(readxl)
elprice13 = read_xls("elspot-prices_2013_hourly_eur.xls")
elprice14 = read_xls("elspot-prices_2014_hourly_eur.xls")
elprice15 = read_xls("elspot-prices_2015_hourly_eur.xls")
elprice16 = read_xls("elspot-prices_2016_hourly_eur.xls")
elprice17 = read_xls("elspot-prices_2017_hourly_eur.xls")
elprice18 = read_xls("elspot-prices_2018_hourly_eur.xls")
elprice19 = read_xls("elspot-prices_2019_hourly_eur.xls")
elprice20 = read_xls("elspot-prices_2020_hourly_eur.xls")
cons13 = read_xls("consumption-se-areas_2013_hourly.xls")
cons14 = read_xls("consumption-se-areas_2014_hourly.xls")
cons15 = read_xls("consumption-se-areas_2015_hourly.xls")
cons16 = read_xls("consumption-se-areas_2016_hourly.xls")
cons17 = read_xls("consumption-se-areas_2017_hourly.xls")
cons18 = read_xls("consumption-se-areas_2018_hourly.xls")
cons19 = read_xls("consumption-se-areas_2019_hourly.xls")
cons20 = read_xls("consumption-se-areas_2020_hourly.xls")
windprod13_20 = read_xls("VindProduktionsStatistik.xls")
df13 = data.frame(elprice13)
df14 = data.frame(elprice14)
df15 = data.frame(elprice15)
df16 = data.frame(elprice16)
df17 = data.frame(elprice17)
df18 = data.frame(elprice18)
df19 = data.frame(elprice19)
df20 = data.frame(elprice20)
data13 = df13[,4]
data14 = df14[,4]
data15 = df15[,4]
data16 = df16[,4]
data17 = df17[,4]
data18 = df18[,4]
data19 = df19[,4]
data13 = df13[c(1,4)]
data13
View(df13)
View(df13)
data13 = df13[c(2,4)]
data13
data13 = df13[c(2,4)]
data14 = df14[c(2,4)]
data15 = df15[c(2,4)]
data16 = df16[c(2,4)]
data17 = df17[c(2,4)]
data18 = df18[c(2,4)]
data19 = df19[c(2,4)]
data20 = df20[c(2,4)]
Data = data.frame(data13,data14,data15,data16,data17,data18,data19,data20)
Data = data.frame(c(data13,data14,data15,data16,data17,data18,data19,data20)
Data = data.frame(c(data13,data14,data15,data16,data17,data18,data19,data20))
Data = c(data13,data14,data15,data16,data17,data18,data19,data20)
Data
View(Data)
View(Data)
data13 = df13[,4]
data14 = df14[,4]
data15 = df15[,4]
data16 = df16[,4]
data17 = df17[,4]
data18 = df18[,4]
data19 = df19[,4]
data20 = df20[,4]
data131 = df13[,2]
data141 = df14[,2]
data151 = df15[,2]
data161 = df16[,2]
data171 = df17[,2]
data181 = df18[,2]
data191 = df19[,2]
data201 = df20[,2]
Data1 = c(data131,data141,data151,data161,data171,data181,data191,data201)
Data2 = c(data13,data14,data15,data16,data17,data18,data19,data20)
Data = data.frame(Data1,Data2)
View(Data)
View(Data)
Data = data.frame(Data1,Data2, remove(na.rows))
data13 = df13[2:,4]
data13 = df13[2:8763,4]
data13 = df13[2:8763,4]
data14 = df14[2:8763,4]
data15 = df15[2:8763,4]
data16 = df16[2:8787,4]
data17 = df17[2:8763,4]
data18 = df18[2:8763,4]
data19 = df19[2:8763,4]
data20 = df20[2:1682,4]
data20
data13 = df13[3:8763,4]
data14 = df14[3:8763,4]
data15 = df15[3:8763,4]
data16 = df16[3:8787,4]
data17 = df17[3:8763,4]
data18 = df18[3:8763,4]
data19 = df19[3:8763,4]
data20 = df20[3:1682,4]
data131 = df13[3:8763,2]
data141 = df14[3:8763,2]
data151 = df15[3:8763,2]
data161 = df16[3:8787,2]
data171 = df17[3:8763,2]
data181 = df18[3:8763,2]
data191 = df19[3:8763,2]
data201 = df20[3:1682,2]
Data1 = c(data131,data141,data151,data161,data171,data181,data191,data201)
Data2 = c(data13,data14,data15,data16,data17,data18,data19,data20)
Data = data.frame(Data1,Data2)
View(Data)
View(Data)
PRICE13 = df13[3:8763,4]
PRICE14 = df14[3:8763,4]
PRICE15 = df15[3:8763,4]
PRICE16 = df16[3:8787,4]
PRICE17 = df17[3:8763,4]
PRICE18 = df18[3:8763,4]
PRICE19 = df19[3:8763,4]
PRICE20 = df20[3:1682,4]
HOURS13 = df13[3:8763,2]
HOURS14 = df14[3:8763,2]
HOURS15 = df15[3:8763,2]
HOURS16 = df16[3:8787,2]
HOURS17 = df17[3:8763,2]
HOURS18 = df18[3:8763,2]
HOURS19 = df19[3:8763,2]
HOURS20 = df20[3:1682,2]
Hours = c(data131,data141,data151,data161,data171,data181,data191,data201)
SE1price= c(data13,data14,data15,data16,data17,data18,data19,data20)
Data = data.frame(Hours,SE1price)
ELspot = data.frame(Hours,SE1price)
Hours = c(HOURS13,HOURS14,HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
SE1price= c(PRICE13,PRICE14,PRICE15,PRICE16,PRICE17,PRICE18,PRICE19,PRICE20)
ELspot = data.frame(Hours,SE1price)
dfp13 = data.frame(elprice13)
dfp14 = data.frame(elprice14)
dfp15 = data.frame(elprice15)
dfp16 = data.frame(elprice16)
dfp17 = data.frame(elprice17)
dfp18 = data.frame(elprice18)
dfp19 = data.frame(elprice19)
dfp20 = data.frame(elprice20)
PRICE13 = dfp13[3:8763,4]
PRICE14 = dfp14[3:8763,4]
PRICE15 = dfp15[3:8763,4]
PRICE16 = dfp16[3:8787,4]
PRICE17 = dfp17[3:8763,4]
PRICE18 = dfp18[3:8763,4]
PRICE19 = dfp19[3:8763,4]
PRICE20 = dfp20[3:1682,4]
Hours = c(HOURS13,HOURS14,HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
SE1price= c(PRICE13,PRICE14,PRICE15,PRICE16,PRICE17,PRICE18,PRICE19,PRICE20)
ELspot = data.frame(Hours,SE1price)
dfc13 = data.frame(cons13)
dfc14 = data.frame(cons14)
dfc15 = data.frame(cons15)
dfc16 = data.frame(cons16)
dfc17 = data.frame(cons17)
dfc18 = data.frame(cons18)
dfc19 = data.frame(cons19)
dfc20 = data.frame(cons20)
View(dfc13)
View(dfc13)
CONS13 = dfc13[3:8763,3]
CONS14 = dfc14[3:8763,3]
CONS15 = dfc15[3:8763,3]
CONS16 = dfc16[3:8787,3]
CONS17 = dfc17[3:8763,3]
CONS18 = dfc18[3:8763,3]
CONS19 = dfc19[3:8763,3]
CONS20 = dfc20[3:8763,3]
SE1cons = c(CONS13,CONS14,CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,cons)
cons = data.frame(Hours,SE1cons)
SE1cons = c(CONS13,CONS14,CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
CONS20 = dfc20[3:1682,3]
SE1cons = c(CONS13,CONS14,CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Wind = data.frame(windprod13_20)
View(Wind)
View(Wind)
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
SE1price= c(PRICE15,PRICE16,PRICE17,PRICE18,PRICE19,PRICE20)
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Wind = data.frame(windprod13_20[]
Wind = data.frame(windprod13_20[745:46225,3]
Wind = data.frame(windprod13_20[745:46225,3])
View(elprice20)
View(elprice20)
CONS20 = dfc20[3:1659,3]
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Wind = data.frame(windprod13_20[745:46225,3])
CONS20 = dfc20[3:1659,3]
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
HOURS20 = dfp20[3:1659,2]
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Wind = data.frame(windprod13_20[745:46224,3])
View(windprod13_20)
View(windprod13_20)
View(cons)
View(cons)
View(cons13)
View(cons13)
View(cons20)
View(cons20)
View(cons13)
View(cons13)
View(cons15)
View(cons15)
CONS20 = dfc20[3:1658,3]
View(cons16)
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
HOURS20 = dfp20[3:1658,2]
cons = data.frame(Hours,SE1cons)
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
cons = data.frame(Hours,SE1cons)
View(windprod13_20)
View(windprod13_20)
Wind = data.frame(windprod13_20[745:46224,1])
Wind = data.frame(windprod13_20[745:46224,3])
View(ELspot)
SE1price= c(PRICE15,PRICE16,PRICE17,PRICE18,PRICE19,PRICE20)
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
ELspot = data.frame(Hours,SE1price)
View(dfc20)
View(dfc20)
PRICE20 = dfp20[3:1658,4]
HOURS20 = dfp20[3:1658,2]
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
SE1price= c(PRICE15,PRICE16,PRICE17,PRICE18,PRICE19,PRICE20)
ELspot = data.frame(Hours,SE1price)
dfc20 = data.frame(cons20)
CONS20 = dfc20[3:1658,3]
SE1cons = c(CONS15,CONS16,CONS17,CONS18,CONS19,CONS20)
cons = data.frame(Hours,SE1cons)
Wind = data.frame(windprod13_20[745:46224,3])
data.frame(Wind,cons)
View(cons)
View(cons)
Wind = data.frame(windprod13_20[745:46224,3])
Hours = data.frame(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
Hours = c(HOURS15,HOURS16,HOURS17,HOURS18,HOURS19,HOURS20)
timerwind = data.frame(windprod13_20[745:46224,1])
View(timerwind)
View(timerwind)
timerwind = data.frame(windprod13_20[746:46224,1])
Wind = data.frame(windprod13_20[746:46224,3])
View(cons)
