setwd("~/Desktop/MatØk6/Bayes-mini-project")
library(Matrix)
############################first part of selfstudy#############################
#how to define sparse 5 x 5 matrix A with 1 and 2 at entries [2,3] and [5,5]
A=sparseMatrix(i=c(2,5),j=c(3,5),x=c(1,2),dims=c(5,5))
#take a look at A
A
#skeleton for profile likelihood procedure
profile.likelihood=function(a,y,X,maximize=T){
n=length(y)
#construct B^{-1} and sqrt(D^{-1}) - both as sparse matrices
......
#Compute S
......
ytilde=as.numeric(S%*%y)#some conversions of formats needed so that lm() is happy (wants data to be of type numeric and design matrix Xtilde to be of ordinary matrix type)
Xtilde=as.matrix(S%*%cbind(rep(1,n),X))#why add column of ones ?
fit=lm(ytilde~-1+Xtilde)
#compute determinant of S
detS=......
if (maximize)
#return likelihood of data y given a (NB log likelihood for ytilde can be extracted using logLik(fit))
else
#return likelihood of data y given a as well as fitted coeffiecients and variance
}
#simulate data
n=10000
a=0.5
tau2=1
nu=sqrt(tau2)*Droot%*%rnorm(n)#Droot inverse of Dinvroot and Binv defined as above
U=solve(Binv,nu)#This corresponds to computing U=B eps
#Ucheck=solve(Binv)%*%eps  don't do this if n is large ! B is not sparse !!
plot(U,type="l")#take a look at simulated errors
mean(U)
var(as.numeric(U))
acf(as.numeric(U))
x=rnorm(n)
X=matrix(x,ncol=1)
y=3+2*x+U
afit=optimize(profile.likelihood,interval=c(-1,1),y=y,X=X,maximum=T)
profile.likelihood(afit$maximum,y,X,maximize=F)
?summary
setwd("~/Desktop/MatØk6/Bachelor/Data")
load("~/Desktop/MatØk6/Bachelor/Data/.RData")
library(readxl)
library(vars)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price= na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice  = data.frame(SE1price)
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
WIND15 = wind15[554:8763,3]
library(imputeTS)
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
library(readxl)
library(vars)
library(imputeTS)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#DATOER
#TIMER
#HOURS15 = dfp15[747:8763,2]
#HOURS16 = dfp16[3:8787,2]
#HOURS17 = dfp17[3:8763,2]
#HOURS18 = dfp18[3:8763,2]
#Hours = c(HOURS15,HOURS16,HOURS17,HOURS18)
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price= na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice  = data.frame(SE1price)
#FORBRUG
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
#VINDPRODUKTION
WIND15 = wind15[554:8763,3]
WIND16 = wind16[3:8787,3]
WIND17 = wind17[3:8763,3]
WIND18 = wind18[3:6290,3]
SE1wind =na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear")
#DATO
#dato15 = elprice15[554:8763,1]
#dato16 = elprice16[3:8787,1]
#dato17 = elprice17[3:8763,1]
#dato18 = elprice18[3:6290,1]
#dato = c(dato15,dato16,dato17,dato18)
#DATA
data = data.frame(SE1price,SE1cons,SE1wind)
windseries = msts(data = SE1wind, seasonal.periods = c(24, 48, 168))
consseries = msts(data = SE1cons, seasonal.periods = c(24, 48, 168))
priceseries= msts(data = SE1price, seasonal.periods = c(24, 48, 168))
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
acf(consseries)
acf(windseries)
acf(priceseries)
decwind = decompose(windseries)
deccons = decompose(consseries)
decprice = decompose(priceseries)
plot(decwind)
plot(deccons)
plot(decprice)
model1= glm()
c_1 * sin((t*2*pi)/365) + c_2* cos((t*2*pi)/365)+
c_3 * sin((t*4*pi)/365) + c_4 * cos((t*4*pi)/365)+
c_5 * sin((t*8*pi)/365) + c_6 * cos((t*8*pi)/365)+
c_7 * sin((t*24*pi)/365) + c_8 * cos((t*24*pi)/365)+
c_9 * sin((t*104*pi)/365) + c_10 * cos((t*104*pi)/365)+
c_11 * sin((t*730*pi)/365) + c_12 * cos((t*730*pi)/365)+
c_13 * sin((t*17520*pi)/365) + c_14 * cos((t*17520*pi)/365)
}
library(forecast)
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#DATOER
#TIMER
#HOURS15 = dfp15[747:8763,2]
#HOURS16 = dfp16[3:8787,2]
#HOURS17 = dfp17[3:8763,2]
#HOURS18 = dfp18[3:8763,2]
#Hours = c(HOURS15,HOURS16,HOURS17,HOURS18)
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price= na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice  = data.frame(SE1price)
#FORBRUG
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
#VINDPRODUKTION
WIND15 = wind15[554:8763,3]
WIND16 = wind16[3:8787,3]
WIND17 = wind17[3:8763,3]
WIND18 = wind18[3:6290,3]
SE1wind =na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear")
#DATO
#dato15 = elprice15[554:8763,1]
#dato16 = elprice16[3:8787,1]
#dato17 = elprice17[3:8763,1]
#dato18 = elprice18[3:6290,1]
#dato = c(dato15,dato16,dato17,dato18)
#DATA
data = data.frame(SE1price,SE1cons,SE1wind)
windseries = msts(data = SE1wind, seasonal.periods = c(24, 48, 168))
consseries = msts(data = SE1cons, seasonal.periods = c(24, 48, 168))
priceseries= msts(data = SE1price, seasonal.periods = c(24, 48, 168))
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
acf(consseries)
acf(windseries)
acf(priceseries)
decwind = decompose(windseries)
deccons = decompose(consseries)
decprice = decompose(priceseries)
plot(decwind)
plot(deccons)
plot(decprice)
model1= glm()
c_1 * sin((t*2*pi)/365) + c_2* cos((t*2*pi)/365)+
c_3 * sin((t*4*pi)/365) + c_4 * cos((t*4*pi)/365)+
c_5 * sin((t*8*pi)/365) + c_6 * cos((t*8*pi)/365)+
c_7 * sin((t*24*pi)/365) + c_8 * cos((t*24*pi)/365)+
c_9 * sin((t*104*pi)/365) + c_10 * cos((t*104*pi)/365)+
c_11 * sin((t*730*pi)/365) + c_12 * cos((t*730*pi)/365)+
c_13 * sin((t*17520*pi)/365) + c_14 * cos((t*17520*pi)/365)
}
windseries = msts(data = SE1wind)
consseries = msts(data = SE1cons)
priceseries= msts(data = SE1price)
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
dato15 = elprice15[554:8763,1]
dato16 = elprice16[3:8787,1]
dato17 = elprice17[3:8763,1]
dato18 = elprice18[3:6290,1]
dato = c(dato15,dato16,dato17,dato18)
View(dato)
dato1 = strptime(dato, format = "%Y-%m-%d %H:%M:%S", "GMT")
View(dato1)
datoer = seq(ymd("2015-01-01"), ymd("2018-12-31"), by="days")
model1= glm(priceseries ~ time(priceseries) +
I(time(priceseries)^2) +
sin((t*2*pi)/365) + cos((t*2*pi)/365)+
sin((t*4*pi)/365) + cos((t*4*pi)/365)+
sin((t*8*pi)/365) + cos((t*8*pi)/365)+
sin((t*24*pi)/365) + cos((t*24*pi)/365)+
sin((t*104*pi)/365) + cos((t*104*pi)/365)+
sin((t*730*pi)/365) + cos((t*730*pi)/365)+
sin((t*17520*pi)/365) + cos((t*17520*pi)/365)
)
model1= glm(priceseries ~ time(priceseries) +
I(time(priceseries)^2) +
sin((2*pi)/365)*I(time(priceseries) +
cos((2*pi)/365)*I(time(priceseries)+
sin((4*pi)/365)*I(time(priceseries)+
cos((4*pi)/365)*I(time(priceseries)+
sin((8*pi)/365)*I(time(priceseries)+
cos((8*pi)/365)*I(time(priceseries)+
sin((24*pi)/365)*I(time(priceseries)+
cos((24*pi)/365)*I(time(priceseries)+
sin((104*pi)/365)*I(time(priceseries)+
cos((104*pi)/365)*I(time(priceseries)+
sin((730*pi)/365)*I(time(priceseries)+
cos((730*pi)/365)*I(time(priceseries)+
sin((17520*pi)/365)*I(time(priceseries)+
cos((17520*pi)/365)*I(time(priceseries)
)
View(priceseries)
View(priceseries)
dato1 <- seq(c(ISOdate(2013,1,1)), by = "hours", length.out = 2191)
?ISOdate
View(dato1)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
dato1 <- seq(c(ISOdate(2015,1,24)), by = "hours", length.out = 32044)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,00)), by = "hours", length.out = 32044)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,0)), by = "hours", length.out = 32044)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,1)), by = "hours", length.out = 32044)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,24)), by = "hours", length.out = 32044)
dato1 <- seq(c(ISOdate(2015,1,24,1)), by = "hours", length.out = 32044)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,0)), by = "hours", length.out = 32044)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,24)), by = "hours", length.out = 32044)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
View(data)
dato1 <- seq(c(ISOdate(2015,1,24,0)), by = "hours", length.out = 32044)
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
View(data)
model1= glm(data[,2] ~ time(data[,1]) +
I(time(data[,1])^2) +
sin((2*pi)/365)*I(time(data[,1]) +
cos((2*pi)/365)*I(time(data[,1])+
sin((4*pi)/365)*I(time(data[,1])+
cos((4*pi)/365)*I(time(data[,1])+
sin((8*pi)/365)*I(time(data[,1])+
cos((8*pi)/365)*I(time(data[,1])+
sin((24*pi)/365)*I(time(data[,1])+
cos((24*pi)/365)*I(time(data[,1])+
sin((104*pi)/365)*I(time(data[,1])+
cos((104*pi)/365)*I(time(data[,1])+
sin((730*pi)/365)*I(time(data[,1])+
cos((730*pi)/365)*I(time(data[,1])+
sin((17520*pi)/365)*I(time(data[,1])+
cos((17520*pi)/365)*I(time(data[,1])
)
?time
View(data)
model1= glm(data[,2] ~ time(data[,1]) +
I(time(data[,1])^2) +
sin((2*pi)/365)*I(time(data[,1])) +
cos((2*pi)/365)*I(time(data[,1]))+
sin((4*pi)/365)*I(time(data[,1]))+
cos((4*pi)/365)*I(time(data[,1]))+
sin((8*pi)/365)*I(time(data[,1]))+
cos((8*pi)/365)*I(time(data[,1]))+
sin((24*pi)/365)*I(time(data[,1]))+
cos((24*pi)/365)*I(time(data[,1]))+
sin((104*pi)/365)*I(time(data[,1]))+
cos((104*pi)/365)*I(time(data[,1]))+
sin((730*pi)/365)*I(time(data[,1]))+
cos((730*pi)/365)*I(time(data[,1]))+
sin((17520*pi)/365)*I(time(data[,1]))+
cos((17520*pi)/365)*I(time(data[,1]))
)
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#DATOER
#TIMER
#HOURS15 = dfp15[747:8763,2]
#HOURS16 = dfp16[3:8787,2]
#HOURS17 = dfp17[3:8763,2]
#HOURS18 = dfp18[3:8763,2]
#Hours = c(HOURS15,HOURS16,HOURS17,HOURS18)
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price= na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice  = data.frame(SE1price)
#FORBRUG
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
#VINDPRODUKTION
WIND15 = wind15[554:8763,3]
WIND16 = wind16[3:8787,3]
WIND17 = wind17[3:8763,3]
WIND18 = wind18[3:6290,3]
SE1wind =na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear")
#DATO
dato15 = elprice15[554:8763,1]
dato16 = elprice16[3:8787,1]
dato17 = elprice17[3:8763,1]
dato18 = elprice18[3:6290,1]
dato = c(dato15,dato16,dato17,dato18)
dato1 <- seq(c(ISOdate(2015,1,24,0)), by = "hours", length.out = 32044)
#DATA
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
acf(consseries)
acf(windseries)
acf(priceseries)
model1= glm(data[,2] ~ time(data[,1]) +
I(time(data[,1])^2) +
sin((2*pi)/365)*I(time(data[,1])) +
cos((2*pi)/365)*I(time(data[,1]))+
sin((4*pi)/365)*I(time(data[,1]))+
cos((4*pi)/365)*I(time(data[,1]))+
sin((8*pi)/365)*I(time(data[,1]))+
cos((8*pi)/365)*I(time(data[,1]))+
sin((24*pi)/365)*I(time(data[,1]))+
cos((24*pi)/365)*I(time(data[,1]))+
sin((104*pi)/365)*I(time(data[,1]))+
cos((104*pi)/365)*I(time(data[,1]))+
sin((730*pi)/365)*I(time(data[,1]))+
cos((730*pi)/365)*I(time(data[,1]))+
sin((17520*pi)/365)*I(time(data[,1]))+
cos((17520*pi)/365)*I(time(data[,1]))
)
View(data)
View(SE1wind)
SE1wind =data.frame(na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear"))
library(readxl)
library(vars)
library(imputeTS)
library(forecast)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#DATOER
#TIMER
#HOURS15 = dfp15[747:8763,2]
#HOURS16 = dfp16[3:8787,2]
#HOURS17 = dfp17[3:8763,2]
#HOURS18 = dfp18[3:8763,2]
#Hours = c(HOURS15,HOURS16,HOURS17,HOURS18)
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price= na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice  = data.frame(SE1price)
#FORBRUG
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
#VINDPRODUKTION
WIND15 = wind15[554:8763,3]
WIND16 = wind16[3:8787,3]
WIND17 = wind17[3:8763,3]
WIND18 = wind18[3:6290,3]
SE1wind =data.frame(na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear"))
#DATO
dato15 = elprice15[554:8763,1]
dato16 = elprice16[3:8787,1]
dato17 = elprice17[3:8763,1]
dato18 = elprice18[3:6290,1]
dato = c(dato15,dato16,dato17,dato18)
dato1 <- seq(c(ISOdate(2015,1,24,0)), by = "hours", length.out = 32044)
#DATA
data = data.frame(dato1,SE1price,SE1cons,SE1wind)
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
acf(consseries)
acf(windseries)
acf(priceseries)
model1= glm(data[,2] ~ time(data[,1]) +
I(time(data[,1])^2) +
sin((2*pi)/365)*I(time(data[,1])) +
cos((2*pi)/365)*I(time(data[,1]))+
sin((4*pi)/365)*I(time(data[,1]))+
cos((4*pi)/365)*I(time(data[,1]))+
sin((8*pi)/365)*I(time(data[,1]))+
cos((8*pi)/365)*I(time(data[,1]))+
sin((24*pi)/365)*I(time(data[,1]))+
cos((24*pi)/365)*I(time(data[,1]))+
sin((104*pi)/365)*I(time(data[,1]))+
cos((104*pi)/365)*I(time(data[,1]))+
sin((730*pi)/365)*I(time(data[,1]))+
cos((730*pi)/365)*I(time(data[,1]))+
sin((17520*pi)/365)*I(time(data[,1]))+
cos((17520*pi)/365)*I(time(data[,1]))
)
model1= glm(data[,2] ~ time(data[,1]) +
I(time(data[,1])^2) +
sin((2*pi)/365*I(time(data[,1]))) +
cos((2*pi)/365*I(time(data[,1])))+
sin((4*pi)/365*I(time(data[,1])))+
cos((4*pi)/365*I(time(data[,1])))+
sin((8*pi)/365*I(time(data[,1])))+
cos((8*pi)/365*I(time(data[,1])))+
sin((24*pi)/365*I(time(data[,1])))+
cos((24*pi)/365*I(time(data[,1])))+
sin((104*pi)/365*I(time(data[,1])))+
cos((104*pi)/365*I(time(data[,1])))+
sin((730*pi)/365*I(time(data[,1])))+
cos((730*pi)/365*I(time(data[,1])))+
sin((17520*pi)/365*I(time(data[,1])))+
cos((17520*pi)/365*I(time(data[,1])))
)
summary(model1)
x_t = (model1$residuals)
x_t = ts(model1$residuals)
plot.ts(x_t)
