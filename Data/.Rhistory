load("C:/Users/line_/Documents/Bachelorprojekt/Bachelor/Bachelor/Bachelor/Data/.RData")
setwd("~/Bachelorprojekt/Bachelor/Bachelor/Bachelor/Data")
library(readxl)
library(vars)
elprice15 = data.frame(read.csv("elspot-prices_2015_hourly_eur.csv",sep=";"), "numeric")
elprice16 = data.frame(read.csv("elspot-prices_2016_hourly_eur.csv",sep=";"), "numeric")
elprice17 = data.frame(read.csv("elspot-prices_2017_hourly_eur.csv",sep=";"), "numeric")
elprice18 = data.frame(read.csv("elspot-prices_2018_hourly_eur.csv",sep=";"), "numeric")
cons15 = data.frame(read.csv("consumption-se-areas_2015_hourly.csv",sep=";"))
cons16 = data.frame(read.csv("consumption-se-areas_2016_hourly.csv",sep=";"))
cons17 = data.frame(read.csv("consumption-se-areas_2017_hourly.csv",sep=";"))
cons18 = data.frame(read.csv("consumption-se-areas_2018_hourly.csv",sep=";"))
wind15 = data.frame(read.csv("wind-power-se_2015_hourly.csv",sep=";"))
wind16 = data.frame(read.csv("wind-power-se_2016_hourly.csv",sep=";"))
wind17 = data.frame(read.csv("wind-power-se_2017_hourly.csv",sep=";"))
wind18 = data.frame(read.csv("wind-power-se_2018_hourly.csv",sep=";"))
#DATOER
#TIMER
#HOURS15 = dfp15[747:8763,2]
#HOURS16 = dfp16[3:8787,2]
#HOURS17 = dfp17[3:8763,2]
#HOURS18 = dfp18[3:8763,2]
#Hours = c(HOURS15,HOURS16,HOURS17,HOURS18)
#PRISER
PRICE15 = elprice15[554:8763,4]
PRICE16 = elprice16[3:8787,4]
PRICE17 = elprice17[3:8763,4]
PRICE18 = elprice18[3:6290,4]
SE1price = na_interpolation(c(PRICE15,PRICE16,PRICE17,PRICE18), option = "linear")
dfprice = data.frame(SE1price)
#FORBRUG
CONS15 = cons15[554:8763,3]
CONS16 = cons16[3:8787,3]
CONS17 = cons17[3:8763,3]
CONS18 = cons18[3:6290,3]
SE1cons = na_interpolation(c(CONS15,CONS16,CONS17,CONS18), option = "linear")
dfcons = data.frame(SE1cons)
#VINDPRODUKTION
WIND15 = wind15[554:8763,3]
WIND16 = wind16[3:8787,3]
WIND17 = wind17[3:8763,3]
WIND18 = wind18[3:6290,3]
SE1wind = na_interpolation(c(WIND15,WIND16,WIND17,WIND18), option = "linear")
#DATO
#dato15 = elprice15[554:8763,1]
#dato16 = elprice16[3:8787,1]
#dato17 = elprice17[3:8763,1]
#dato18 = elprice18[3:6290,1]
#dato = c(dato15,dato16,dato17,dato18)
#DATA
data = data.frame(SE1price,SE1cons,SE1wind)
windseries = msts(data = SE1wind, seasonal.periods = c(24, 48, 168))
consseries = msts(data = SE1cons, seasonal.periods = c(24, 48, 168))
priceseries= msts(data = SE1price, seasonal.periods = c(24, 48, 168))
plot.ts(priceseries)
plot.ts(windseries)
plot.ts(consseries)
acf(consseries)
acf(windseries)
acf(priceseries)
decwind = decompose(windseries)
deccons = decompose(consseries)
decprice = decompose(priceseries)
plot(decwind)
plot(deccons)
plot(decprice)
myfunc = function(b_0, b_T, c_1,c_2,c_3,c_4,c_5,c_6,c_7,c_8,c_9,c_10,c_11,c_12,c13,c_14,t){
b_0+b_T*t+
c_1 * sin((t*2*pi)/365) + c_2* cos((t*2*pi)/365)+
c_3 * sin((t*4*pi)/365) + c_4 * cos((t*4*pi)/365)+
c_5 * sin((t*8*pi)/365) + c_6 * cos((t*8*pi)/365)+
c_7 * sin((t*24*pi)/365) + c_8 * cos((t*24*pi)/365)+
c_9 * sin((t*104*pi)/365) + c_10 * cos((t*104*pi)/365)+
c_11 * sin((t*730*pi)/365) + c_12 * cos((t*730*pi)/365)+
c_13 * sin((t*17520*pi)/365) + c_14 * cos((t*17520*pi)/365)
}
myfunc(windseries)
library(forecast)
windseries = msts(data = SE1wind, seasonal.periods = c(24, 48, 168))
consseries = msts(data = SE1cons, seasonal.periods = c(24, 48, 168))
priceseries= msts(data = SE1price, seasonal.periods = c(24, 48, 168))
plot(decwind)
plot(deccons)
plot(decprice)
arima(windseries)
arima(consseries)
arima(priceseries)
load("C:/Users/line_/Dropbox/P6/Data/R - code/.RData")
library(forecast)
library(astsa)
library(readxl)
library(lme4)
library(fracdiff)
setwd("C:/Users/mads/Dropbox/P6/Data/Elspot prices")
setwd("C:/Users/Line/Dropbox/P6/Data/Elspot prices")
Eldaily2013 <- read_excel("Eldaily2014-2018.xlsx",
col_types = c("numeric", "blank", "blank",
"blank", "blank", "blank", "blank",
"numeric", "numeric", "blank", "blank",
"blank", "blank", "blank", "blank",
"blank", "blank", "blank", "blank"))
dage <- seq(1, 365*5, by=1)
Eldaily2013$X__1 <- dage
colnames(Eldaily2013)[1] <- "Date"
dk1f <- Eldaily2013[1:2]
par("mfrow" = c(1,1))
acf(dk1f[2])
# MA model
fit1 <- auto.arima(dk1f[2],max.d = 0, max.p = 0, ic = "aic", max.q = 100, stepwise = FALSE,parallel = TRUE) # MA(5)
fit2 <- auto.arima(dk1f[2],max.d = 0, max.p = 0, ic = "bic",max.q = 100, stepwise = FALSE,parallel = TRUE) # MA(5)
sarima(ts(dk1f[2],frequency = 7),0,0,5)
# AR model
fit3 <- auto.arima(dk1f[2],max.d = 0, max.q = 0, ic = "aic", max.p = 100, stepwise = FALSE,parallel = TRUE) # AR(5)
fit4 <- auto.arima(dk1f[2],max.d = 0, max.q = 0, ic = "bic", max.p = 100, stepwise = FALSE,parallel = TRUE) # AR(5)
sarima(ts(dk1f[2],frequency = 7),5,0,0)
sarima(ts(dk1f[2],frequency = 7),1,0,0)
# ARMA model
auto.arima(dk1f[2],max.d = 0, ic = "aic", max.p = 15, max.q = 15, stepwise = FALSE,parallel = TRUE)
auto.arima(dk1f[2],max.d = 0, ic = "bic", max.p = 15, max.q = 15, stepwise = FALSE,parallel = TRUE)
sarima(ts(dk1f[2],frequency = 7), 1, 0, 2)
# ARIMA model
auto.arima(dk1f[2],ic = "aic",max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
auto.arima(dk1f[2],ic = "bic",max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE)
sarima(ts(dk1f[2],frequency = 7),1,1,2)
# ARFIMA model
d <- fracdiff(ts(dk1f[2]))$d
fdiff <- diffseries(ts(dk1f[2]),d)
fit <- auto.arima(ts(fdiff,frequency = 7),max.p = 20, max.q = 20, max.d = 0,max.P = 0,max.Q = 0, max.D = 0, stepwise = FALSE, parallel = TRUE)
sarima(ts(fdiff),1,0,2,2,0,0,7)
par(mfrow = c(1,2))
acf1(fdiff, main = "", xlab = "Lag")
pacf(fdiff)
arima(dk1f[2],c(1,1,2))
sarima(ts(fdiff,frequency = 7),5,0,0,0,0,0,7)
aic <- c()
bic <- c()
for (i in 0:3) {
aic[i+1+8] <- sarima(ts(dk1f[2]),3,0,2,i,0,0,7)$AIC
bic[i+1+8] <- sarima(ts(dk1f[2]),3,0,2,i,0,0,7)$BIC
aic[i+1+4+8] <- sarima(ts(dk1f[2]),3,0,2,0,0,i,7)$AIC
bic[i+1+4+8] <- sarima(ts(dk1f[2]),3,0,2,0,0,i,7)$BIC
}
par(mfrow = c(2,1))
plot(aic,type = "l")
plot(bic, type = "l")
x <- c()
for (i in 1:300) {
x[i] <- adf.test(unlist(dk1f[2]), k = i)[4]
}
plot(unlist(x),type = "l", main = "p-value vs lag-order", ylab = "p-value",xlab = "lag-order")
par(mfrow = c(1,2))
acf1(ts(dk1f[2]),max.lag = 30, main = NULL)
pacf(dk1f[2], lag.max = 30,ylim = c(-0.05,1))
BIC(arima(dk1f[2],order = c(3,0,0)))
par(mfrow=c(1,1))
ARaic <- c(23574.29,23570.88,23513.14,23485.91 ,23446.1,23348,23303.18,23304.67,23306.66,23307.52)
ARbic <- c(23591.36,23593.64,23541.6 ,23541.6 ,23485.94,23393.78,23354.4,23361.59 ,23369.27,23375.82 )
plot(ARaic, col = "blue", type = "l",ylim = c(23300,23600))
lines(ARbic, col = "red")
# AR
x <- c()
for (i in 1:20) {
x[[i]] <- BIC(arima(dk1f[2],order = c(i,0,0)))
print(i)
}
plot(x,type = "l")
y <- c()
for (i in 1:20) {
y[[i]] <- AIC(arima(dk1f[2],order = c(i,0,0)))
print(i)
}
plot(x,type = "l",col = "red",ylim = c(23250, 23600))
lines(y, col = "blue")
# MA
x <- c()
for (i in 1:20) {
x[[i]] <- BIC(arima(dk1f[2],order = c(0,0,i)))
print(i)
}
plot(x,type = "l")
y <- c()
for (i in 1:20) {
y[[i]] <- AIC(arima(dk1f[2],order = c(0,0,i)))
print(i)
}
plot(y,type = "l")
lines(x,col = "red")
# ARMA
c <- matrix(1:(5*5),nrow = 5, ncol=5)
for (i in 1:5) {
for (j in 1:5) {
c[[i,j]] <- AIC(arima(dk1f[2],order = c(i,0,j)))
print(j)
}
print(i)
}
plot(c(c), type = "l")
v <- matrix(1:(5*5),nrow = 5, ncol=5)
for (i in 1:5) {
for (j in 1:5) {
v[[i,j]] <- BIC(arima(dk1f[2],order = c(i,0,j)))
print(j)
}
print(i)
}
plot(c(v),type = "l",ylim = c(23200,23600))
lines(c(c),col = "red")
# ARFIMA
h <- matrix(1:1024,ncol = 4)
for (p in 0:3) {
for (q in 0:3) {
for (P in 0:3) {
for (Q in 0:3) {
for (D in 0:3) {
h[Q+P+q+p+1,D] <- aic(arima(fdiff),p,q,P,D,Q)
}
}
}
}
}
c <- decompose(ts(dk1f[2],frequency = 365))
g <- c$x-c$trend-c$seasonal
fit <- auto.arima(g)
sarima(g,1,0,1)
auto.arima(dk1f[2],max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, seasonal = TRUE, allowmean = FALSE)
sarima(ts(dk1f[2], frequency = 365),3,1,2)
auto.arima(ts(dk1f[2],frequency = 52))
sarima(ts(dk1f[2], frequency = 52),1,1,2,0,0,1,52)
auto.arima(ts(dk1f[2],frequency = 7),max.p = 10, max.q = 10, max.d = 10,max.P = 0,max.Q = 0,max.D = 0, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
sarima(ts(dk1f[2],frequency = 7),1,1,2,0,0,0,7)
sarima(ts(dk1f[2], frequency = 7),4,0,5,2,1,1,7)
diff(dk1f[2],0.487)
d <- fracdiff(ts(dk1f[2],frequency = 7))$d
newdata <- diffseries(ts(dk1f[2],frequency = 7),d)
plot(newdata,type = "l")
acf(ts(newdata,frequency = 7))
pacf(newdata)
auto.arima(ts(newdata,frequency = 7), max.p = 5, max.q = 5, max.d = 3, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
sarima(ts(fdiff,frequency = 7),4,0,5,2,1,1,7)
auto.arima(SE1wind,ic = "aic",max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
auto.arima(SE1wind,max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
setwd("~/Bachelorprojekt/Bachelor/Bachelor/Bachelor/Data")
auto.arima(SE1wind,max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
auto.arima(SE1cons,max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
auto.arima(SE1price,max.p = 20, max.q = 20, max.d = 20, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
plot(fit1)
fit = auto.arima(SE1cons,frequency = 7, 14, 30, 90 365),max.p = 10, max.q = 10, max.d = 10,max.P = 10,max.Q = 10,max.D = 10, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
fit = auto.arima(SE1cons,frequency = 7, 14, 30, 90, 365),max.p = 10, max.q = 10, max.d = 10,max.P = 10,max.Q = 10,max.D = 10, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
fit = auto.arima(SE1cons,frequency = 7),max.p = 10, max.q = 10, max.d = 10,max.P = 10,max.Q = 10,max.D = 10, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
fit = auto.arima(msts(windseries(frequency = 7),max.p = 10, max.q = 10, max.d = 10,max.P = 10,max.Q = 10,max.D = 10, stepwise = FALSE,parallel = TRUE, allowdrift = FALSE)
